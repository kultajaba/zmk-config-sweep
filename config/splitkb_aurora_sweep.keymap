/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        lenter {
            bindings = <&kp ENTER>;
            key-positions = <30 31>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        save_as {
            bindings = <&kp LC(LS(S))>;
            key-positions = <10 11>;
            timeout-ms = <200>;
            layers = <3>;
        };
    };

    macros {
        super2: super2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N2 &kp KP_NUMBER_5 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp LALT>;

            label = "SUPER2";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        super3: SUPER3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_N9>,
                <&macro_release>,
                <&kp LALT>;

            label = "SUPER3";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        supero: SUPERO {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;

            label = "SUPERO";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        vaehemmaen: vaehemmaen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LALT>;

            label = "VAEHEMMAEN";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        enemmaen: enemmaen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;

            label = "ENEMMAEN";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        piippu: piippu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N1 &kp KP_N2 &kp KP_N4>,
                <&macro_release>,
                <&kp LALT>;

            label = "PIIPPU";
            wait-ms = <30>;
            tap-ms = <30>;
        };
    };

    behaviors {
        mo_tg_behavior: mo_tg_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TG_BEHAVIOR";
            bindings = <&mo>, <&lt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        qs_c: qs_c {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_C";
            bindings = <&kp LC(C)>, <&kp C>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_v: qs_v {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_V";
            bindings = <&kp LC(V)>, <&kp V>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_z: qs_z {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_Z";
            bindings = <&kp LC(Z)>, <&kp Z>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_x: qs_x {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_X";
            bindings = <&kp LC(X)>, <&kp X>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_b: qs_b {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_B";
            bindings = <&kp LC(B)>, <&kp B>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_n: qs_n {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_N";
            bindings = <&kp LC(N)>, <&kp N>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_p: qs_p {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_P";
            bindings = <&kp LC(P)>, <&kp P>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_r: qs_r {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_R";
            bindings = <&kp LC(R)>, <&kp R>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_d: qs_d {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_D";
            bindings = <&kp LC(D)>, <&kp D>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        qs_w: qs_w {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_W";
            bindings = <&kp LC(W)>, <&kp W>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        mod_mod_t: mod_mod_t {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_MOD_T";
            bindings = <&kp>, <&qs_t>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        qs_t: qs_t {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_T";
            bindings = <&kp LC(T)>, <&kp T>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LSFT)>;
        };

        qs_s: qs_s {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_S";
            bindings = <&kp LC(S)>, <&kp S>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LGUI)>;
            keep-mods = <(MOD_LSFT|MOD_LGUI)>;
        };

        qs_a: qs_a {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_A";
            bindings = <&kp LC(A)>, <&kp A>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LGUI|MOD_LCTL|MOD_LALT)>;
        };

        mod_mod_s: mod_mod_s {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_MOD_S";
            bindings = <&kp>, <&qs_s>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mod_mod_a: mod_mod_a {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_MOD_A";
            bindings = <&kp>, <&qs_a>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        qs_1: qs_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_1";
            bindings = <&kp KP_N1>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_2: qs_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_2";
            bindings = <&kp KP_N2>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_3: qs_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_3";
            bindings = <&kp KP_N3>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_4: qs_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_4";
            bindings = <&kp KP_N4>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_5: qs_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_5";
            bindings = <&kp KP_N5>, <&kp NUMBER_5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_6: qs_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_6";
            bindings = <&kp KP_N6>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_7: qs_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_7";
            bindings = <&kp KP_NUMBER_7>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_8: qs_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_8";
            bindings = <&kp KP_N8>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_9: qs_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_9";
            bindings = <&kp KP_N9>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        qs_0: qs_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "QS_0";
            bindings = <&kp KP_N0>, <&kp NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
            keep-mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        kp_tg_behavior: kp_tg_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TG_BEHAVIOR";
            bindings = <&kp>, <&lt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp Q                &kp W      &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I      &kp O       &kp P
&kp A                &kp S      &kp D  &kp F  &kp G    &kp H  &kp J  &kp K      &kp L       &kp SEMICOLON
&kp Z                &kp X      &kp C  &kp V  &kp B    &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp SQT
&mo_tg_behavior 3 5  &kp SPACE                                                  &kp RSHIFT  &mo 2
            >;
        };

        aewdrp_layer {
            bindings = <
&kp SQT  &trans  &kp D   &trans  &kp P     &kp J   &kp K   &kp U   &kp Y   &kp SEMICOLON
&trans   &trans  &kp E   &kp T   &trans    &trans  &kp N   &kp I   &trans  &kp O
&trans   &trans  &trans  &trans  &trans    &kp F   &trans  &trans  &trans  &kp Q
&trans   &trans                                                    &trans  &trans
            >;
        };

        sym_layer {
            bindings = <
&kp EXCL     &kp LC(LA(NUMBER_2))  &kp HASH       &kp PERCENT  &kp LC(LA(NUMBER_3))         &kp LS(NUMBER_6)   &kp LS(NUMBER_2)  &kp LA(LC(N8))  &kp LC(LA(N8))  &kp LS(MINUS)
&piippu      &kp LC(LA(NUMBER_4))  &kp LC(LA(E))  &super2      &kp GRAVE                    &kp EQUAL          &kp LS(N7)        &kp LS(N8)      &kp LS(N9)      &kp NON_US_BACKSLASH
&vaehemmaen  &enemmaen             &supero        &super3      &kp LS(LC(RIGHT_BRACKET))    &kp RIGHT_BRACKET  &kp BACKSLASH     &kp LA(LC(N7))  &kp LC(LA(N0))  &kp SLASH
&trans       &kp LSHFT                                                                                                                           &none           &trans
            >;
        };

        nav_layer {
            bindings = <
&kp ESCAPE           &qs_w               &qs_d         &qs_r              &qs_p    &kp ESC    &kp HOME        &kp UP_ARROW  &kp END     &kp PG_UP
&mod_mod_a LSHIFT 0  &mod_mod_s LCTRL 0  &kp LEFT_WIN  &mod_mod_t LALT 0  &qs_n    &kp TAB    &kp LEFT_ARROW  &kp DOWN      &kp RIGHT   &kp DEL
&qs_z                &qs_x               &qs_c         &qs_v              &qs_b    &kp ENTER  &kp BACKSPACE   &kp INS       &kp K_MENU  &kp PG_DN
&trans               &none                                                                                                  &none       &trans
            >;
        };

        func_layer {
            bindings = <
&tog 1        &kp K_VOL_DN  &kp K_MUTE        &kp K_VOL_UP  &bt BT_NXT    &kp PRINTSCREEN  &kp F1  &kp F2   &kp F3   &kp F4
&kp LSHIFT    &kp LCTRL     &kp LWIN          &kp LALT      &bt BT_PRV    &kp CAPSLOCK     &kp F5  &kp F6   &kp F7   &kp F8
&out OUT_TOG  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &bt BT_CLR    &kp SCROLLLOCK   &kp F9  &kp F10  &kp F11  &kp F12
&trans        &none                                                                                         &none    &trans
            >;
        };

        num-lk_layer {
            bindings = <
&kp KP_SLASH             &qs_1      &qs_2  &qs_3  &kp KP_PLUS     &kp ESC    &kp HOME       &kp UP_ARROW         &kp END     &kp PG_UP
&mt LSHIFT KP_MULTIPLY   &qs_4      &qs_5  &qs_6  &qs_0           &kp TAB    &kp LEFT       &mt RWIN DOWN_ARROW  &kp RIGHT   &kp DEL
&kp KP_COMMA             &qs_7      &qs_8  &qs_9  &kp KP_MINUS    &kp ENTER  &kp BACKSPACE  &kp INS              &kp K_MENU  &kp PG_DN
&kp_tg_behavior LCTRL 5  &kp ENTER                                                                               &none       &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        function {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
